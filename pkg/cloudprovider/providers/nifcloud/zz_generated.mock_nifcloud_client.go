// Code generated by MockGen. DO NOT EDIT.
// Source: nifcloud_client.go
//
// Generated by this command:
//
//	mockgen -source=nifcloud_client.go -destination=zz_generated.mock_nifcloud_client.go -package=nifcloud
//

// Package nifcloud is a generated GoMock package.
package nifcloud

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCloudAPIClient is a mock of CloudAPIClient interface.
type MockCloudAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudAPIClientMockRecorder
}

// MockCloudAPIClientMockRecorder is the mock recorder for MockCloudAPIClient.
type MockCloudAPIClientMockRecorder struct {
	mock *MockCloudAPIClient
}

// NewMockCloudAPIClient creates a new mock instance.
func NewMockCloudAPIClient(ctrl *gomock.Controller) *MockCloudAPIClient {
	mock := &MockCloudAPIClient{ctrl: ctrl}
	mock.recorder = &MockCloudAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudAPIClient) EXPECT() *MockCloudAPIClientMockRecorder {
	return m.recorder
}

// AuthorizeSecurityGroupIngress mocks base method.
func (m *MockCloudAPIClient) AuthorizeSecurityGroupIngress(ctx context.Context, securityGroupName string, securityGroupRule *SecurityGroupRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthorizeSecurityGroupIngress", ctx, securityGroupName, securityGroupRule)
	ret0, _ := ret[0].(error)
	return ret0
}

// AuthorizeSecurityGroupIngress indicates an expected call of AuthorizeSecurityGroupIngress.
func (mr *MockCloudAPIClientMockRecorder) AuthorizeSecurityGroupIngress(ctx, securityGroupName, securityGroupRule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthorizeSecurityGroupIngress", reflect.TypeOf((*MockCloudAPIClient)(nil).AuthorizeSecurityGroupIngress), ctx, securityGroupName, securityGroupRule)
}

// ConfigureElasticLoadBalancerHealthCheck mocks base method.
func (m *MockCloudAPIClient) ConfigureElasticLoadBalancerHealthCheck(ctx context.Context, elasticLoadBalancer *ElasticLoadBalancer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureElasticLoadBalancerHealthCheck", ctx, elasticLoadBalancer)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureElasticLoadBalancerHealthCheck indicates an expected call of ConfigureElasticLoadBalancerHealthCheck.
func (mr *MockCloudAPIClientMockRecorder) ConfigureElasticLoadBalancerHealthCheck(ctx, elasticLoadBalancer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureElasticLoadBalancerHealthCheck", reflect.TypeOf((*MockCloudAPIClient)(nil).ConfigureElasticLoadBalancerHealthCheck), ctx, elasticLoadBalancer)
}

// CreateElasticLoadBalancer mocks base method.
func (m *MockCloudAPIClient) CreateElasticLoadBalancer(ctx context.Context, loadBalancer *ElasticLoadBalancer) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateElasticLoadBalancer", ctx, loadBalancer)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateElasticLoadBalancer indicates an expected call of CreateElasticLoadBalancer.
func (mr *MockCloudAPIClientMockRecorder) CreateElasticLoadBalancer(ctx, loadBalancer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateElasticLoadBalancer", reflect.TypeOf((*MockCloudAPIClient)(nil).CreateElasticLoadBalancer), ctx, loadBalancer)
}

// CreateLoadBalancer mocks base method.
func (m *MockCloudAPIClient) CreateLoadBalancer(ctx context.Context, loadBalancer *LoadBalancer) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancer", ctx, loadBalancer)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancer indicates an expected call of CreateLoadBalancer.
func (mr *MockCloudAPIClientMockRecorder) CreateLoadBalancer(ctx, loadBalancer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancer", reflect.TypeOf((*MockCloudAPIClient)(nil).CreateLoadBalancer), ctx, loadBalancer)
}

// DeleteElasticLoadBalancer mocks base method.
func (m *MockCloudAPIClient) DeleteElasticLoadBalancer(ctx context.Context, loadBalancer *ElasticLoadBalancer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteElasticLoadBalancer", ctx, loadBalancer)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteElasticLoadBalancer indicates an expected call of DeleteElasticLoadBalancer.
func (mr *MockCloudAPIClientMockRecorder) DeleteElasticLoadBalancer(ctx, loadBalancer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteElasticLoadBalancer", reflect.TypeOf((*MockCloudAPIClient)(nil).DeleteElasticLoadBalancer), ctx, loadBalancer)
}

// DeleteLoadBalancer mocks base method.
func (m *MockCloudAPIClient) DeleteLoadBalancer(ctx context.Context, loadBalancer *LoadBalancer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancer", ctx, loadBalancer)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancer indicates an expected call of DeleteLoadBalancer.
func (mr *MockCloudAPIClientMockRecorder) DeleteLoadBalancer(ctx, loadBalancer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancer", reflect.TypeOf((*MockCloudAPIClient)(nil).DeleteLoadBalancer), ctx, loadBalancer)
}

// DeregisterInstancesFromElasticLoadBalancer mocks base method.
func (m *MockCloudAPIClient) DeregisterInstancesFromElasticLoadBalancer(ctx context.Context, loadBalancer *ElasticLoadBalancer, instances []Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterInstancesFromElasticLoadBalancer", ctx, loadBalancer, instances)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterInstancesFromElasticLoadBalancer indicates an expected call of DeregisterInstancesFromElasticLoadBalancer.
func (mr *MockCloudAPIClientMockRecorder) DeregisterInstancesFromElasticLoadBalancer(ctx, loadBalancer, instances any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterInstancesFromElasticLoadBalancer", reflect.TypeOf((*MockCloudAPIClient)(nil).DeregisterInstancesFromElasticLoadBalancer), ctx, loadBalancer, instances)
}

// DeregisterInstancesFromLoadBalancer mocks base method.
func (m *MockCloudAPIClient) DeregisterInstancesFromLoadBalancer(ctx context.Context, loadBalancer *LoadBalancer, instances []Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterInstancesFromLoadBalancer", ctx, loadBalancer, instances)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterInstancesFromLoadBalancer indicates an expected call of DeregisterInstancesFromLoadBalancer.
func (mr *MockCloudAPIClientMockRecorder) DeregisterInstancesFromLoadBalancer(ctx, loadBalancer, instances any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterInstancesFromLoadBalancer", reflect.TypeOf((*MockCloudAPIClient)(nil).DeregisterInstancesFromLoadBalancer), ctx, loadBalancer, instances)
}

// DescribeElasticLoadBalancers mocks base method.
func (m *MockCloudAPIClient) DescribeElasticLoadBalancers(ctx context.Context, name string) ([]ElasticLoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeElasticLoadBalancers", ctx, name)
	ret0, _ := ret[0].([]ElasticLoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeElasticLoadBalancers indicates an expected call of DescribeElasticLoadBalancers.
func (mr *MockCloudAPIClientMockRecorder) DescribeElasticLoadBalancers(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeElasticLoadBalancers", reflect.TypeOf((*MockCloudAPIClient)(nil).DescribeElasticLoadBalancers), ctx, name)
}

// DescribeInstancesByInstanceID mocks base method.
func (m *MockCloudAPIClient) DescribeInstancesByInstanceID(ctx context.Context, instanceIDs []string) ([]Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstancesByInstanceID", ctx, instanceIDs)
	ret0, _ := ret[0].([]Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstancesByInstanceID indicates an expected call of DescribeInstancesByInstanceID.
func (mr *MockCloudAPIClientMockRecorder) DescribeInstancesByInstanceID(ctx, instanceIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstancesByInstanceID", reflect.TypeOf((*MockCloudAPIClient)(nil).DescribeInstancesByInstanceID), ctx, instanceIDs)
}

// DescribeInstancesByInstanceUniqueID mocks base method.
func (m *MockCloudAPIClient) DescribeInstancesByInstanceUniqueID(ctx context.Context, instanceUniqueIDs []string) ([]Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeInstancesByInstanceUniqueID", ctx, instanceUniqueIDs)
	ret0, _ := ret[0].([]Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeInstancesByInstanceUniqueID indicates an expected call of DescribeInstancesByInstanceUniqueID.
func (mr *MockCloudAPIClientMockRecorder) DescribeInstancesByInstanceUniqueID(ctx, instanceUniqueIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeInstancesByInstanceUniqueID", reflect.TypeOf((*MockCloudAPIClient)(nil).DescribeInstancesByInstanceUniqueID), ctx, instanceUniqueIDs)
}

// DescribeLoadBalancers mocks base method.
func (m *MockCloudAPIClient) DescribeLoadBalancers(ctx context.Context, name string) ([]LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLoadBalancers", ctx, name)
	ret0, _ := ret[0].([]LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLoadBalancers indicates an expected call of DescribeLoadBalancers.
func (mr *MockCloudAPIClientMockRecorder) DescribeLoadBalancers(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLoadBalancers", reflect.TypeOf((*MockCloudAPIClient)(nil).DescribeLoadBalancers), ctx, name)
}

// DescribeSecurityGroupsByInstanceIDs mocks base method.
func (m *MockCloudAPIClient) DescribeSecurityGroupsByInstanceIDs(ctx context.Context, instanceIDs []string) ([]SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeSecurityGroupsByInstanceIDs", ctx, instanceIDs)
	ret0, _ := ret[0].([]SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeSecurityGroupsByInstanceIDs indicates an expected call of DescribeSecurityGroupsByInstanceIDs.
func (mr *MockCloudAPIClientMockRecorder) DescribeSecurityGroupsByInstanceIDs(ctx, instanceIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeSecurityGroupsByInstanceIDs", reflect.TypeOf((*MockCloudAPIClient)(nil).DescribeSecurityGroupsByInstanceIDs), ctx, instanceIDs)
}

// RegisterInstancesWithElasticLoadBalancer mocks base method.
func (m *MockCloudAPIClient) RegisterInstancesWithElasticLoadBalancer(ctx context.Context, loadBalancer *ElasticLoadBalancer, instances []Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInstancesWithElasticLoadBalancer", ctx, loadBalancer, instances)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterInstancesWithElasticLoadBalancer indicates an expected call of RegisterInstancesWithElasticLoadBalancer.
func (mr *MockCloudAPIClientMockRecorder) RegisterInstancesWithElasticLoadBalancer(ctx, loadBalancer, instances any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInstancesWithElasticLoadBalancer", reflect.TypeOf((*MockCloudAPIClient)(nil).RegisterInstancesWithElasticLoadBalancer), ctx, loadBalancer, instances)
}

// RegisterInstancesWithLoadBalancer mocks base method.
func (m *MockCloudAPIClient) RegisterInstancesWithLoadBalancer(ctx context.Context, loadBalancer *LoadBalancer, instances []Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInstancesWithLoadBalancer", ctx, loadBalancer, instances)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterInstancesWithLoadBalancer indicates an expected call of RegisterInstancesWithLoadBalancer.
func (mr *MockCloudAPIClientMockRecorder) RegisterInstancesWithLoadBalancer(ctx, loadBalancer, instances any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInstancesWithLoadBalancer", reflect.TypeOf((*MockCloudAPIClient)(nil).RegisterInstancesWithLoadBalancer), ctx, loadBalancer, instances)
}

// RegisterPortWithElasticLoadBalancer mocks base method.
func (m *MockCloudAPIClient) RegisterPortWithElasticLoadBalancer(ctx context.Context, loadBalancer *ElasticLoadBalancer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPortWithElasticLoadBalancer", ctx, loadBalancer)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterPortWithElasticLoadBalancer indicates an expected call of RegisterPortWithElasticLoadBalancer.
func (mr *MockCloudAPIClientMockRecorder) RegisterPortWithElasticLoadBalancer(ctx, loadBalancer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPortWithElasticLoadBalancer", reflect.TypeOf((*MockCloudAPIClient)(nil).RegisterPortWithElasticLoadBalancer), ctx, loadBalancer)
}

// RegisterPortWithLoadBalancer mocks base method.
func (m *MockCloudAPIClient) RegisterPortWithLoadBalancer(ctx context.Context, loadBalancer *LoadBalancer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPortWithLoadBalancer", ctx, loadBalancer)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterPortWithLoadBalancer indicates an expected call of RegisterPortWithLoadBalancer.
func (mr *MockCloudAPIClientMockRecorder) RegisterPortWithLoadBalancer(ctx, loadBalancer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPortWithLoadBalancer", reflect.TypeOf((*MockCloudAPIClient)(nil).RegisterPortWithLoadBalancer), ctx, loadBalancer)
}

// RevokeSecurityGroupIngress mocks base method.
func (m *MockCloudAPIClient) RevokeSecurityGroupIngress(ctx context.Context, securityGroupName string, securityGroupRule *SecurityGroupRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSecurityGroupIngress", ctx, securityGroupName, securityGroupRule)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeSecurityGroupIngress indicates an expected call of RevokeSecurityGroupIngress.
func (mr *MockCloudAPIClientMockRecorder) RevokeSecurityGroupIngress(ctx, securityGroupName, securityGroupRule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSecurityGroupIngress", reflect.TypeOf((*MockCloudAPIClient)(nil).RevokeSecurityGroupIngress), ctx, securityGroupName, securityGroupRule)
}

// SetFilterForLoadBalancer mocks base method.
func (m *MockCloudAPIClient) SetFilterForLoadBalancer(ctx context.Context, loadBalancer *LoadBalancer, filters []Filter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFilterForLoadBalancer", ctx, loadBalancer, filters)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFilterForLoadBalancer indicates an expected call of SetFilterForLoadBalancer.
func (mr *MockCloudAPIClientMockRecorder) SetFilterForLoadBalancer(ctx, loadBalancer, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFilterForLoadBalancer", reflect.TypeOf((*MockCloudAPIClient)(nil).SetFilterForLoadBalancer), ctx, loadBalancer, filters)
}

// WaitSecurityGroupApplied mocks base method.
func (m *MockCloudAPIClient) WaitSecurityGroupApplied(ctx context.Context, securityGroupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitSecurityGroupApplied", ctx, securityGroupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitSecurityGroupApplied indicates an expected call of WaitSecurityGroupApplied.
func (mr *MockCloudAPIClientMockRecorder) WaitSecurityGroupApplied(ctx, securityGroupName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitSecurityGroupApplied", reflect.TypeOf((*MockCloudAPIClient)(nil).WaitSecurityGroupApplied), ctx, securityGroupName)
}
